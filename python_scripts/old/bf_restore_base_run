from tminterface.structs import BFEvaluationDecision, BFEvaluationInfo, BFEvaluationResponse, BFPhase
from tminterface.interface import TMInterface
from tminterface.client import Client
import sys
import signal
import time

import datetime
import math
import shutil

res_file = "C:/Users/rmnlm/Documents/TMInterface/Scripts/result.txt"
position_optimized = [20, 128, 483]
target_cp_number = 1
min_dist_diff = 0
eval_time_min = 60000
eval_time_max = 63000
min_velocity_for_uber = 100
max_iterations_for_uber = 300

def compute_dist_2_points(pos1, pos2):
    return (pos2[0]-pos1[0]) ** 2 + (pos2[1]-pos1[1]) ** 2 + (pos2[2]-pos1[2]) ** 2

def compute_velocity(vel):
    return math.sqrt(vel[0] ** 2 + vel[1] ** 2 + vel[2] ** 2)

class MainClient(Client):
    def __init__(self) -> None:
        self.lowest_time = 1000000
        self.lowest_dist = 1000000
        self.current_time = 1000000
        self.current_dist = 1000000
        # self.eval_time = -1
        self.do_accept = False
        self.do_reject = False
        self.force_accept = False
        self.phase = BFPhase.INITIAL
        self.goal = "find_uber"
        self.iterations = 0
        self.iterations_after_uber = 0
        self.save = ""
        self.is_base_run_saved = False

    def on_registered(self, iface: TMInterface) -> None:
        print(f'Registered to {iface.server_name}')
        iface.execute_command('set controller bruteforce')
        iface.execute_command('set bf_search_forever true')

    def on_simulation_begin(self, iface):
        self.lowest_time = iface.get_event_buffer().events_duration

    def on_bruteforce_evaluate(self, iface, info: BFEvaluationInfo) -> BFEvaluationResponse:
        # print("bf")
        self.current_time = info.time - 2610
        self.phase = info.phase
            
        response = BFEvaluationResponse()
        response.decision = BFEvaluationDecision.DO_NOTHING
        
        if self.phase == BFPhase.INITIAL:
            response.decision = BFEvaluationDecision.CONTINUE
            
            if not self.is_base_run_saved:
                self.save_base_run(iface)
                
            if self.save != "":
                date = datetime.datetime.now()
                date = date.strftime("%Y%m%d_%H%M%S")
                dest = res_file.replace("result.txt", f"{date} {self.save}.txt")
                shutil.copy2(res_file, dest)
                self.save = ""
        
        else:
            if self.current_time < eval_time_min:
                if self.current_time == eval_time_min - 10:
                    if self.iterations % 100 == 0:
                        print(f"{self.iterations=}")
                    
                    self.iterations += 1
                    
            elif self.current_time <= eval_time_max:
                response.decision = BFEvaluationDecision.CONTINUE
            
                if self.iterations > max_iterations_for_uber:
                    print("too many iterations, restoring base run")
                    self.iterations = 0
                    self.goal = "find_uber"
                    self.load_base_run(iface)
                    response.decision = BFEvaluationDecision.ACCEPT
                
        # if self.force_accept:
            # response.decision = BFEvaluationDecision.ACCEPT
            # self.lowest_time = self.current_time
            # self.lowest_dist = 100000
            
            # self.do_accept = False
            # self.force_accept = False
            # return response
            
        # if self.do_accept:
            # self.eval_time = self.current_time + eval_after_in_ms
            
        # if self.do_reject:
            # response.decision = BFEvaluationDecision.REJECT
            
        # self.do_accept = False
        # self.do_reject = False
        # self.force_accept = False
        return response

    # def on_checkpoint_count_changed(self, iface, current: int, target: int):
        # if current == target_cp_number:
            # state = iface.get_simulation_state()
            # if self.phase == BFPhase.INITIAL:
                # self.lowest_time = state.get_time() - 2610
                #self.lowest_dist = compute_dist_2_points(position_optimized, state.get_position())
                
                # self.eval_time = -1
            # elif self.phase == BFPhase.SEARCH:
                # if state.get_position()[1] > 50:
                    # self.force_accept = True
    
    def save_base_run(self, iface):
        # print("a")
        self.is_base_run_saved = True
        self.base_run = iface.get_event_buffer()
    
    def load_base_run(self, iface):
        iface.set_event_buffer(self.base_run)
        
def main():
    server_name = 'TMInterface0'
    if len(sys.argv) > 1:
        server_name = 'TMInterface' + str(sys.argv[1])

    print(f'Connecting to {server_name}...')

    iface = TMInterface(server_name)
    def handler(signum, frame):
        iface.close()

    signal.signal(signal.SIGBREAK, handler)
    signal.signal(signal.SIGINT, handler)

    client = MainClient()
    iface.register(client)

    while iface.running:
        time.sleep(0)

if __name__ == '__main__':
    main()
